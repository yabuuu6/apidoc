import { useState, useEffect } from 'react';
import axios from 'axios';
import '../index.css';
import { toast } from 'react-toastify';
import { PlusIcon, LightBulbIcon, ServerIcon } from '@heroicons/react/24/outline';
import { base_url } from '../store/useApiStore';
import { useApiStore } from '../store/useApiStore';

export default function EndpointsPage() {
  const [isDbMode, setIsDbMode] = useState(false);
  const [projects, setProjects] = useState([]);
  const [selectedProject, setSelectedProject] = useState(null);
  const [tables, setTables] = useState([]);
  const [selectedTable, setSelectedTable] = useState('');
  const [isGeneratingDb, setIsGeneratingDb] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [jsonError, setJsonError] = useState(null);
  const [jsonPreview, setJsonPreview] = useState(false);
  const [showPreview, setShowPreview] = useState(false);
  const [autoGeneratedJson, setAutoGeneratedJson] = useState(null);

  
  // Animation states - matching AddDomainForm pattern
  const [isVisible, setIsVisible] = useState(false);
  const [formVisible, setFormVisible] = useState(false);
  const [tipsVisible, setTipsVisible] = useState(false);
  const [toggleVisible, setToggleVisible] = useState(false);
  
  const { generateSingleEndpointFromDb } = useApiStore();
  const [form, setForm] = useState({
    baseUrl: '',
    method: 'GET',
    path: '/',
    description: '',
    status: 'Develop',
    websites: '',
    response: ''
  });

  const { domains, fetchDomains } = useApiStore();

  useEffect(() => {
    if (isDbMode) fetchProjects();
  }, [isDbMode]);

  useEffect(() => {
    fetchDomains();
  }, []);

  useEffect(() => {
    console.log('selectedProject:', selectedProject);
  }, [selectedProject]);

  useEffect(() => {
  try {
    const websites = typeof form.websites === 'string'
      ? form.websites.split(',').map((w) => w.trim())
      : [];

    const response = JSON.parse(form.response || '{}');

    const preview = {
      ...form,
      method: form.method.toUpperCase(),
      websites,
      response
    };

    setAutoGeneratedJson(preview);
    setJsonError(null);
  } catch (err) {
    setJsonError('Response JSON tidak valid');
    setAutoGeneratedJson(null);
  }
}, [form]);

  // Animation trigger - matching AddDomainForm timing
  useEffect(() => {
    setTimeout(() => setIsVisible(true), 100);
    setTimeout(() => setToggleVisible(true), 300);
    setTimeout(() => setFormVisible(true), 400);
    setTimeout(() => setTipsVisible(true), 600);
  }, []);

  const fetchProjects = async () => {
    try {
      const res = await axios.get(`${base_url}/restapi/get`);
      const uniqueProjects = [];

      res.data.forEach((p) => {
        if (p.projectName && !uniqueProjects.find(u => u.projectName === p.projectName)) {
          uniqueProjects.push({ projectName: p.projectName, uuid: p.uuid });
        }
      });

      setProjects(uniqueProjects);
    } catch {
      toast.error('Gagal memuat daftar proyek');
    }
  };

  const handleChange = (e) => {
  const { name, value } = e.target;

  setForm((prev) => ({
    ...prev,
    [name]: value
  }));

  if (name === 'response') {
    setJsonError(null); 
    setShowPreview(false);
  }
};

      const handlePreviewJson = () => {
      try {
        const parsed = JSON.parse(form.response || '{}');
        setJsonPreview(parsed);
        setJsonError(null);
        setShowPreview(true);
      } catch (err) {
        setJsonError('Response JSON tidak valid');
        setJsonPreview(null);
        setShowPreview(false);
      }
    };


  const handleManualSubmit = async () => {
    if (!form.baseUrl || !form.method || !form.path) {
      toast.warning('Isi semua field wajib');
      return;
    }

    let parsedResponse;
    try {
      parsedResponse = JSON.parse(form.response || '{}');
    } catch (err) {
      setJsonError('Response JSON tidak valid');
      return;
    }

    try {
      setIsSubmitting(true);
      const payload = {
        ...form,
        method: form.method.toUpperCase(),
        websites: form.websites ? form.websites.split(',').map(w => w.trim()) : [],
        response: parsedResponse
      };

      await axios.post(`${base_url}/endpoints`, payload);
      toast.success('Endpoint berhasil disimpan');

      setForm({
        baseUrl: '',
        method: 'GET',
        path: '/',
        description: '',
        status: 'Develop',
        websites: '',
        response: ''
      });
      setJsonError(null);
    } catch (err) {
      toast.error('Gagal menyimpan endpoint');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleDbPreview = async () => {
    if (!selectedProject || !selectedProject.uuid) {
      toast.warning('Pilih proyek terlebih dahulu');
      return;
    }

    try {
      const res = await axios.get(`${base_url}/restapi/${selectedProject.uuid}`);
      const tableNames = res.data?.tables || [];

      if (tableNames.length === 0) {
        toast.info('Tidak ada tabel ditemukan dalam proyek ini');
      }

      setTables(tableNames);
    } catch (err) {
      toast.error('Gagal mengambil tabel dari database');
      console.error(err);
    }
  };

  const handleGenerate = async () => {
    if (!selectedProject || !selectedProject.uuid || !selectedTable) {
      toast.warning('Pilih proyek dan tabel terlebih dahulu');
      return;
    }

    try {
      await generateSingleEndpointFromDb(selectedProject.uuid, selectedTable);
    } catch (err) {
      console.error('Gagal generate:', err);
    }
  };

  return (
    <div className="min-h-screen bg-white px-6 py-10">
      <div className="max-w-5xl mx-auto flex flex-col gap-8">
        {/* Header */}
        <div 
          className="text-center"
          style={{
            transform: isVisible ? 'translateY(0)' : 'translateY(-30px)',
            opacity: isVisible ? 1 : 0,
            transition: 'all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94)'
          }}
        >
          <h1 className="text-3xl font-extrabold text-gray-800 mb-1">
            Dokumentasi API
          </h1>
          <p 
            className="text-gray-500 text-sm"
            style={{
              transform: isVisible ? 'translateY(0)' : 'translateY(10px)',
              opacity: isVisible ? 1 : 0,
              transition: 'all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94) 0.3s'
            }}
          >
            Tambahkan endpoint REST API secara manual atau otomatis
          </p>
        </div>

        {/* Mode Toggle */}
        <div 
          className="flex justify-end"
          style={{
            transform: toggleVisible ? 'translateX(0) scale(1)' : 'translateX(30px) scale(0.95)',
            opacity: toggleVisible ? 1 : 0,
            transition: 'all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94)'
          }}
        >
          <div className="bg-white border border-gray-200 rounded-lg shadow-sm overflow-hidden">
            <button
              onClick={() => setIsDbMode(false)}
              className={`px-4 py-2 text-sm font-semibold transition-all duration-300 ${
                !isDbMode ? 'bg-blue-600 text-white' : 'bg-white text-gray-600 hover:bg-gray-50'
              }`}
              style={{
                transform: !isDbMode ? 'scale(1.05)' : 'scale(1)',
                transition: 'transform 0.2s ease'
              }}
            >
              Manual
            </button>
            <button
              onClick={() => setIsDbMode(true)}
              className={`px-4 py-2 text-sm font-semibold transition-all duration-300 ${
                isDbMode ? 'bg-blue-600 text-white' : 'bg-white text-gray-600 hover:bg-gray-50'
              }`}
              style={{
                transform: isDbMode ? 'scale(1.05)' : 'scale(1)',
                transition: 'transform 0.2s ease'
              }}
            >
              Database
            </button>
          </div>
        </div>

        {/* Main Content */}
        <div className="max-w-7xl mx-auto grid grid-cols-1 md:grid-cols-3 gap-6 px-4">
          {/* <div className="grid grid-cols-1 md:grid-cols-3 gap-6 max-w-7xl mx-auto"></div> */}
          {/* Form Card */}
          <form
            onSubmit={(e) => e.preventDefault()}
            className="md:col-span-2 bg-white border border-gray-200 shadow-md rounded-xl p-8 space-y-6"
            style={{
              transform: formVisible ? 'translateX(0) scale(1)' : 'translateX(-30px) scale(0.95)',
              opacity: formVisible ? 1 : 0,
              transition: 'all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94)'
            }}
            onMouseEnter={(e) => {
              e.target.style.boxShadow = '0 8px 25px rgba(0, 0, 0, 0.1)';
              e.target.style.transform = 'translateY(-2px)';
              e.target.style.transition = 'all 0.3s ease';
            }}
            onMouseLeave={(e) => {
              e.target.style.boxShadow = '0 1px 3px rgba(0, 0, 0, 0.1)';
              e.target.style.transform = 'translateY(0)';
            }}
          >
            <div 
              className="flex items-center"
              style={{
                transform: formVisible ? 'translateX(0)' : 'translateX(-20px)',
                opacity: formVisible ? 1 : 0,
                transition: 'all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94) 0.2s'
              }}
            >
              <PlusIcon 
                className="w-5 h-5 text-blue-600 mr-2" 
                style={{
                  transform: formVisible ? 'rotate(0deg) scale(1)' : 'rotate(-90deg) scale(0.8)',
                  transition: 'transform 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94) 0.3s'
                }}
              />
              <h2 className="text-lg font-semibold text-gray-800">Tambah Endpoint</h2>
            </div>

            {isDbMode ? (
              <>
                <div
                  style={{
                    transform: formVisible ? 'translateY(0)' : 'translateY(15px)',
                    opacity: formVisible ? 1 : 0,
                    transition: 'all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94) 0.4s'
                  }}
                >
                  <label className="block text-sm font-medium text-gray-700 mb-1">Pilih Proyek</label>
                  <select
                    value={selectedProject?.projectName || ''}
                    onChange={(e) => {
                      const selected = projects.find(p => p.projectName === e.target.value);
                      setSelectedProject(selected || null);
                      setTables([]);
                      setSelectedTable('');
                    }}
                    className="w-full border border-gray-300 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition"
                    onFocus={(e) => {
                      e.target.style.transform = 'scale(1.02)';
                      e.target.style.transition = 'transform 0.2s ease';
                    }}
                    onBlur={(e) => {
                      e.target.style.transform = 'scale(1)';
                    }}
                  >
                    <option value="">-- Pilih Proyek --</option>
                    {projects.map((p, i) => (
                      <option key={`${p.projectName}-${i}`} value={p.projectName}>
                        {p.projectName}
                      </option>
                    ))}
                  </select>
                </div>

                <button
                  type="button"
                  onClick={handleDbPreview}
                  disabled={isGeneratingDb}
                  className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 text-sm font-semibold disabled:opacity-50 transition-all duration-200"
                  style={{
                    transform: formVisible ? 'translateY(0) scale(1)' : 'translateY(10px) scale(0.95)',
                    opacity: formVisible ? 1 : 0,
                    transition: 'all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94) 0.5s'
                  }}
                  onMouseEnter={(e) => {
                    if (!isGeneratingDb) {
                      e.target.style.transform = 'scale(1.05)';
                      e.target.style.transition = 'transform 0.2s ease';
                    }
                  }}
                  onMouseLeave={(e) => {
                    if (!isGeneratingDb) {
                      e.target.style.transform = 'scale(1)';
                    }
                  }}
                >
                  <ServerIcon 
                    className="w-4 h-4 inline-block mr-1" 
                    style={{
                      transform: isGeneratingDb ? 'rotate(180deg)' : 'rotate(0deg)',
                      transition: 'transform 0.3s ease'
                    }}
                  />
                  {isGeneratingDb ? 'Loading...' : 'Preview Tabel'}
                </button>

                {tables.length > 0 && (
                  <div 
                    className="space-y-4"
                    style={{
                      transform: tables.length > 0 ? 'translateY(0)' : 'translateY(20px)',
                      opacity: tables.length > 0 ? 1 : 0,
                      transition: 'all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94)'
                    }}
                  >
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Pilih Tabel</label>
                      <select
                        value={selectedTable}
                        onChange={(e) => {
                          const tbl = e.target.value;
                          setSelectedTable(tbl);
                          setForm((prev) => ({
                            ...prev,
                            path: tbl ? `/${tbl}` : '/'
                          }));
                        }}
                        className="w-full border border-gray-300 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition"
                        onFocus={(e) => {
                          e.target.style.transform = 'scale(1.02)';
                          e.target.style.transition = 'transform 0.2s ease';
                        }}
                        onBlur={(e) => {
                          e.target.style.transform = 'scale(1)';
                        }}
                      >
                        {tables.map((t, i) => (
                          <option key={`${t}-${i}`} value={t}>{t}</option>
                        ))}
                      </select>
                    </div>
                  </div>
                )}
              </>
            ) : (
              <div
                style={{
                  
                  transform: formVisible ? 'translateY(0)' : 'translateY(15px)',
                  opacity: formVisible ? 1 : 0,
                  transition: 'all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94) 0.4s'
                }}
              >
                <label className="block text-sm font-medium text-gray-700 mb-1">Pilih Domain</label>
                <select
                  name="baseUrl"
                  value={form.baseUrl}
                  onChange={handleChange}
                  className="w-full border border-gray-300 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition"
                  onFocus={(e) => {
                    e.target.style.transform = 'scale(1.02)';
                    e.target.style.transition = 'transform 0.2s ease';
                  }}
                  onBlur={(e) => {
                    e.target.style.transform = 'scale(1)';
                  }}
                >
                  <option value="">-- Pilih Domain --</option>
                  {domains.map((d, i) => (
                    <option key={`${d}-${i}`} value={d}>{d}</option>
                  ))}
                </select>
              </div>
            )}

            <div 
              className="grid grid-cols-1 md:grid-cols-2 gap-6"
              style={{
                transform: formVisible ? 'translateY(0)' : 'translateY(20px)',
                opacity: formVisible ? 1 : 0,
                transition: 'all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94) 0.5s'
              }}
            >
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Method</label>
                <select
                  name="method"
                  value={form.method}
                  onChange={handleChange}
                  className="w-full border border-gray-300 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition"
                  onFocus={(e) => {
                    e.target.style.transform = 'scale(1.02)';
                    e.target.style.transition = 'transform 0.2s ease';
                  }}
                  onBlur={(e) => {
                    e.target.style.transform = 'scale(1)';
                  }}
                >
                  {['GET', 'POST', 'PUT', 'DELETE'].map((m) => (
                    <option key={m} value={m}>{m}</option>
                  ))}
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Path</label>
                <input
                  type="text"
                  name="path"
                  value={form.path}
                  onChange={handleChange}
                  className="w-full border border-gray-300 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition"
                  onFocus={(e) => {
                    e.target.style.transform = 'scale(1.02)';
                    e.target.style.transition = 'transform 0.2s ease';
                  }}
                  onBlur={(e) => {
                    e.target.style.transform = 'scale(1)';
                  }}
                />
              </div>
            </div>

            <div
              style={{
                transform: formVisible ? 'translateY(0)' : 'translateY(15px)',
                opacity: formVisible ? 1 : 0,
                transition: 'all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94) 0.6s'
              }}
            >
              <label className="block text-sm font-medium text-gray-700 mb-1">Deskripsi</label>
              <input
                type="text"
                name="description"
                value={form.description}
                onChange={handleChange}
                className="w-full border border-gray-300 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition"
                onFocus={(e) => {
                  e.target.style.transform = 'scale(1.02)';
                  e.target.style.transition = 'transform 0.2s ease';
                }}
                onBlur={(e) => {
                  e.target.style.transform = 'scale(1)';
                }}
              />
            </div>

            <div
              style={{
                transform: formVisible ? 'translateY(0)' : 'translateY(15px)',
                opacity: formVisible ? 1 : 0,
                transition: 'all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94) 0.7s'
              }}
            >
              <label className="block text-sm font-medium text-gray-700 mb-1">Status</label>
              <select
                name="status"
                value={form.status}
                onChange={handleChange}
                className="w-full border border-gray-300 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition"
                onFocus={(e) => {
                  e.target.style.transform = 'scale(1.02)';
                  e.target.style.transition = 'transform 0.2s ease';
                }}
                onBlur={(e) => {
                  e.target.style.transform = 'scale(1)';
                }}
              >
                <option value="Develop">Develop</option>
                <option value="Production">Production</option>
              </select>
            </div>{!isDbMode && (
            <div
              style={{
                transform: formVisible ? 'translateY(0)' : 'translateY(15px)',
                opacity: formVisible ? 1 : 0,
                transition: 'all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94) 0.75s'
              }}
            >
              <label className="block text-sm font-medium text-gray-700 mb-1">Websites</label>
              <input
                type="text"
                name="websites"
                value={form.websites}
                onChange={handleChange}
                placeholder="Contoh: google.com, facebook.com"
                className="w-full border border-gray-300 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition"
                onFocus={(e) => {
                  e.target.style.transform = 'scale(1.02)';
                  e.target.style.transition = 'transform 0.2s ease';
                }}
                onBlur={(e) => {
                  e.target.style.transform = 'scale(1)';
                }}
              />
            </div>
                )}
            <div
              style={{
                transform: formVisible ? 'translateY(0)' : 'translateY(20px)',
                opacity: formVisible ? 1 : 0,
                transition: 'all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94) 0.8s'
              }}
            >
              {/* Textarea untuk input JSON manual */}
              {/* <textarea
                name="response"
                value={form.response}
                onChange={handleChange}
                rows="6"
                className="w-full border border-gray-300 rounded-md p-2 font-mono focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition"
                onFocus={(e) => {
                  e.target.style.transform = 'scale(1.01)';
                  e.target.style.transition = 'transform 0.2s ease';
                }}
                onBlur={(e) => {
                  e.target.style.transform = 'scale(1)';
                }}
              /> */}

              {/* Error jika response JSON tidak valid */}
              {jsonError && (
                <p className="text-red-500 text-sm mt-1">
                  {jsonError}
                </p>
              )}

              {/* Live preview JSON dari seluruh input form */}
              {autoGeneratedJson && (
                <div className="mt-4">
                  <label className="block text-sm font-medium text-gray-700 mb-1">Preview JSON Otomatis</label>
                  <pre className="bg-gray-100 border border-gray-300 rounded-md p-4 text-sm font-mono whitespace-pre-wrap text-gray-700 overflow-x-auto">
                    {JSON.stringify(autoGeneratedJson, null, 2)}
                  </pre>
                </div>
              )}
            </div>

            <div className="flex justify-end mt-6">
            {isDbMode ? (
              <button
                type="button"
                onClick={handleGenerate}
                disabled={isGeneratingDb}
                className="flex items-center justify-center gap-2 px-6 py-2 bg-green-600 text-white rounded hover:bg-green-700 font-semibold text-sm disabled:opacity-50 transition-all duration-200"
                style={{
                  transform: formVisible ? 'translateY(0) scale(1)' : 'translateY(20px) scale(0.95)',
                  opacity: formVisible ? 1 : 0,
                  transition: 'all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94) 0.9s'
                }}
                onMouseEnter={(e) => {
                  e.target.style.transform = 'scale(1.05)';
                  e.target.style.transition = 'transform 0.2s ease';
                }}
                onMouseLeave={(e) => {
                  e.target.style.transform = 'scale(1)';
                }}
              >
                <PlusIcon className="w-4 h-4" />
                Generate Endpoint
              </button>
            ) : (
              <button
                type="button"
                onClick={handleManualSubmit}
                disabled={isSubmitting}
                className="flex items-center justify-center gap-2 px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 font-semibold text-sm disabled:opacity-50 transition-all duration-200"
                style={{
                  transform: formVisible ? 'translateY(0) scale(1)' : 'translateY(20px) scale(0.95)',
                  opacity: formVisible ? 1 : 0,
                  transition: 'all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94) 0.9s'
                }}
                onMouseEnter={(e) => {
                  e.target.style.transform = 'scale(1.05)';
                  e.target.style.transition = 'transform 0.2s ease';
                }}
                onMouseLeave={(e) => {
                  e.target.style.transform = 'scale(1)';
                }}
              >
                <PlusIcon className="w-4 h-4" />
                Simpan Endpoint
              </button>
            )}
          </div>
          </form>

          {/* Tips Card */}
          <aside 
            // className="bg-gray-50 border border-gray-200 rounded-lg p-6 shadow-sm h-fit flex flex-col"
            className="md:col-span-1 bg-white border border-gray-200 shadow-md rounded-xl p-4 h-fit"
            style={{
              transform: tipsVisible ? 'translateX(0) scale(1)' : 'translateX(30px) scale(0.95)',
              opacity: tipsVisible ? 1 : 0,
              transition: 'all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94)'
            }}
            onMouseEnter={(e) => {
              e.target.style.transform = 'translateY(-5px) scale(1.02)';
              e.target.style.boxShadow = '0 10px 25px rgba(0, 0, 0, 0.15)';
              e.target.style.transition = 'all 0.3s ease';
            }}
            onMouseLeave={(e) => {
              e.target.style.transform = 'translateY(0) scale(1)';
              e.target.style.boxShadow = '0 1px 3px rgba(0, 0, 0, 0.1)';
            }}
          >
            <div 
              className="flex items-center gap-2 font-semibold text-gray-700 mb-3"
              style={{
                transform: tipsVisible ? 'translateY(0)' : 'translateY(-10px)',
                opacity: tipsVisible ? 1 : 0,
                transition: 'all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94) 0.2s'
              }}
            >
              <LightBulbIcon 
                className="w-5 h-5 text-yellow-500" 
                style={{
                  transform: tipsVisible ? 'rotate(0deg) scale(1)' : 'rotate(-15deg) scale(0.8)',
                  transition: 'transform 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94) 0.3s'
                }}
              />
              Tips Pengisian
            </div>
            <ul className="list-disc list-inside text-sm text-gray-600 space-y-1">
              {[
                'Gunakan IP public Anda',
                'Jika port dikosongkan, sistem akan menggunakan default',
                'Pastikan response JSON valid',
                'Gunakan mode database untuk generate otomatis'
              ].map((tip, index) => (
                <li 
                  key={index}
                  style={{
                    transform: tipsVisible ? 'translateX(0)' : 'translateX(-15px)',
                    opacity: tipsVisible ? 1 : 0,
                    transition: `all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94) ${0.4 + index * 0.1}s`
                  }}
                >
                  {tip}
                </li>
              ))}
            </ul>
          </aside>
        </div>
      </div>

      <style jsx>{`
        @keyframes pulse {
          0%, 100% {
            opacity: 1;
          }
          50% {
            opacity: 0.7;
          }
        }
      `}</style>
    </div>
  );
}